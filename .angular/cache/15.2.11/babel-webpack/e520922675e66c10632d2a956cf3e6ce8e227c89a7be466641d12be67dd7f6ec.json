{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { API_BASE } from './environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.tokenKey = 'auth_token';\n      this.refreshKey = 'refresh_token';\n      this.userKey = 'auth_user';\n    }\n    login(payload) {\n      return this.http.post(`${API_BASE}/auth/login`, payload);\n    }\n    register(payload) {\n      return this.http.post(`${API_BASE}/auth/register`, payload);\n    }\n    setTokens(resp) {\n      if (resp?.accessToken) localStorage.setItem(this.tokenKey, resp.accessToken);\n      if (resp?.refreshToken) localStorage.setItem(this.refreshKey, resp.refreshToken);\n      if (resp?.user) localStorage.setItem(this.userKey, JSON.stringify(resp.user));\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    getUser() {\n      const s = localStorage.getItem(this.userKey);\n      return s ? JSON.parse(s) : null;\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    isAdmin() {\n      const u = this.getUser();\n      return !!(u && u.roles && Array.isArray(u.roles) && u.roles.includes('ADMIN'));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem(this.refreshKey);\n      localStorage.removeItem(this.userKey);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}